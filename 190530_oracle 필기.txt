like 연산자
% : 1개 이상의 문자와 일치
_ : 1개의 문자만 일치


정렬 명령어
order by asc;  // 오름차순. default값
by desc //내림차순


==================================================================

<< sql*Plus 명령어 >>
: 오라클에서만 제공하는 틀

1) L(List) : 방금 전 사용한 쿼리문 보여주기(1개)
2) / : 방금 전 실행한 sql문 재실행
3) R(Run) : 방금 전 실행한 쿼리문 보여주고 실행하기
4) ED(EDit) : 방금 실행한 명령어 편집하기
5) SAV(SAVe) : 쿼리문을 파일에 저장할 때 사용/ 기본적인 확장자는 .sql

save sample REPLACE
* REPLACE : 이전 내용을 새 내용으로 대체(덮어쓰기)
save sample APPEND
* APPEND : 이전 내용에 새 내용을 추가

6) @파일명 : 외부 sql문 실행 (.sql 확장자명은 생략 가능)
7) spool / spool off (시작/종료): 화면 캡쳐(갈무리)

spool test
select * from employee;
select * from department;
spool off;


==================================================================

<< column 명령어 >>

1) An : 문자 형식 칼럼의 출력 길이를 조정

select * from department;
column dname format a40
콘솔에 출력되는 모양만 바뀜

2) 9 : 숫자 형식 칼럼의 출력 길이를 조정

column salary format 0,000,000

3) 0 : 지정된 길이만큼 숫자 앞에 0 추가

column salary format 9,999,999

==================================================================

 pagesize : default값은 15 
set pagesize 10

==================================================================

<< 문자 함수 >>

1) UPPER
2) LOWER
3) INITCAP : 첫 글자만 대문자


<< 문자 조작 함수 >>

1) concat : 문자열 합치기

select concat('I', 'You') from dual;
select 'I'||'You' from dual;

2) substr : 문자열 추출 / substr(대상, 시작위치. 추출할 개수)

select substr('i like you', 3, 4) from dual; >> like
select substr('i like you', -4, 3) from dual; >> yo

3) instr : 특정 문자의 index 반환 / instr(대상, 찾을 문자, 시작 위치, 몇 번째 발견);

select * from employee where instr(ename, 'R', 3, 1) = 3;
select instr('Oracle Mania', 'a') from dual; >> 3(첫번째 a 위치)
select instr('Oracle Mania', 'a', 1, 2) from dual; >> 9(두번째 a 위치)
select instr('Oracle Mania', 'a', 4, 1) from dual; >> 9(두번째 a 위치)
select instr('Oracle Mania', 'a', 4) from dual; >> 9(두번째 a 위치)
select instr('Oracle Mania', 'a', 4, 2) from dual; >> 12(세번째 a 위치)

4) LPAD(left padding) : 컬럼이나 문자열을 명시된 자릿수에서 오른쪽에 나타내고
			남은 왼쪽 자리를 특정 기호로 채움

select LPAD(salary, 10, '*') from employee; >> *******800

5) RPAD(right padding) : 컬럼이나 문자열을 명시된 자릿수에서 왼쪽에 나타내고
			 남은 오른쪽 자리를 특정 기호로 채움

select LPAD(salary, 10, '*') from employee; >> 800*******

6) LTRIM / RTRIM / TRIM : (왼쪽/오른쪽/양쪽) 공백 제거

select '  Oracle Mania  ', LTRIM('  Oracle Mania  '), RTRIM('  Oracle Mania  '), TRIM('  Oracle Mania  ') from dual;

TRIM : 칼럼이나 대상 문자열에서 특정 문자가 첫번째 글자이거나 마지막 글자이면 잘라내고 남은 문자열만 반환

select TRIM('O' from 'Oracle Mania') from dual; >> racle Mania
select TRIM('a' from 'Oracle Mania') from dual; >> Oracle Mani



==================================================================

<< 숫자 함수 >>

1) ROUND : 특정 자리수에서 반올림

select round(98.7654), round(98.7654, 2), round(98.7654, -1) from dual; >> 99, 98.77, 100
* -1 : 정수부분에서 반올림. 98.7654 에서 8 반올림에 0.7 반올림해서 100 ??

2) TRUNC : 특정 자리수에서 버림

select trunc(98.7654), trunc(98.7654, 2), trunc(98.7654, -1) from dual; >> 98, 98.76, 90

* 특정 날짜에서 월을 기준으로 버림한 날짜 구하기
select hiredate, trunc(hiredate, 'MONTH') from employee;

3) MOD : 입력받은 숫자로 나눈 나머지값을 반환

select mod(31, 2), mod(31, 5), mod(31, 8) from dual; >> 1, 1, 7



==================================================================

<< 날짜 함수 >>

1) sysdate : 시스템에 저장된 현재 날짜를 반환

select sysdate from dual;

2) MONTHS_BETWEEN : 두 날짜 사이가 몇개월인지 반환

select MONTHS_BETWEEN(sysdate+1, sysdate-1) from dual;

3) NEXT_DAY : 특정 날짜에서 최초로 도래하는 인자로 받은 요일의 날짜를 반환

select NEXT_DAY(sysdate, '토요일') from dual;

4) LAST_DAY : 해당 달의 마지막 날짜를 반환

select LAST_DAY(sysdate) from dual;
select ename, hiredate, last_day(hiredate) from employee; // 입사한 달의 마지막 날짜 구하기


==================================================================

<< 형변환 함수 >>

1) TO_CHAR : 날짜형 혹은 숫자형을 문자형으로 변환 
TO_CHAR(number|date, 'format') - format은 작은따옴표로 묶어서 대소문자 구분해 사용

<format 형식> -----------------------------------------------------
YYYY 연도 표현(4자리) YY 연도 표현(2자리)
MM : 월을 숫자로 표현
MON : 월을 알파벳으로 표현
DAY : 요일 표현
DY : 요일을 약어로 표현
 ------------------------------------------------------------------

select ename, hiredate, TO_CHAR(hiredate, 'YY-MM'), TO_CHAR(hiredate, 'YYYY/MM/DD DAY') from employee;

2) 


==================================================================

<< 시간 관련 함수 >>

1) AM / PM : 오전, 오후
A.M / P.M : 오전. 오후.

2) HH24 / HH12 : 시간(0~23/1~12)

3) MM : 분 / SS : 초

select TO_CHAR(sysdate, 'YYYY/MM/DD, HH24:MM:SS') from dual;
: 각 지역별 통화 기호를 앞에 붙여준다.

4) TO_DATE : 특정 데이터를 날짜형으로 변환해주는 함수

select ename from employee where hiredate=TO_DATE(hiredate, 'YYYY-MM-DD');

 ------------------------------------------------------------------
Q. 올해 며칠이 지났는지 출력하기
select TO_DATE(sysdate, 'yyyy-mm-dd')-TO_DATE(trunc(sysdate, 'year'), 'yyyy-mm-dd') from dual;
 ------------------------------------------------------------------

select eno, ename, TO_CHAR(hiredate, 'YY/MM(DY)') from employee;


==================================================================

특정 테이커는 풍셩 배영으로 슬라이닝
==================================================================


<< 통화 기호붙이기 >>

1) select ename, TO_CHAR(salary, '999,999');

select ''
10,100

==================================================================

<< 일반함수 >>

1) nvl : null을 0 또는 다른 값으로 반환하기 위한 함수

nvl(commission, 0)
nvl(hiredate, '2019/05/30');
nvl(job, 'MANAGER');

2) nvl2
* nvl2(exp1, exp2, exp3) : exp1를 검사하여 그 결과가 null이면 exp2값을 반환, 그렇지 않으면 exp3를 반환

select ename, salary, nvl2(commission, salary*12+commission, salary*12) from employee;

3) NULLIF(exp1, exp2) : 두 표현식을 비교해 동일하다면 null 반환, 그렇지 않으면 exp1 반환

select NULLIF('A', 'A'), NULLIF('A', 'B') from dual;

4) DECODE : 

select ename, dno, decode(dno, 10, 'ACCOUNTING', 20, 'RESEARCH', 30, 'SALES', 40, 'OPERATIONS', 'DEFAULT')
 as dname from employee order by dno;

select eno, ename, job, salary,
 decode(job, 'ANALYST', (salary+200), 'SALESMAN', salary+180, 'MANAGER', salary+150, 'CLERK', salary+100, salary)
 as update_salary from employee;


5) case : 
select ename, dno,
 case when dno=10 then 'accounting'
 when dno=20 then 'research'
 when dno=30 then 'operations'
 e
end as ename;
from employees


==================================================================

<< 그룹함수 >> : *** 다른 연산자와 달리 null값은 자동적으로 제외하고 계산함 ***

1) sum : 누적 합계

2) avg : 평균

3) count : 총 개수

4) max : 최댓값

5) min : 최솟값

select sum(salary) "급여 총액", avg(salary) "급여 평균", max(salary) "최대 급여", min(salary) "최소 급여" from employee;

6) group by : 특정 컬럼을 기준으로 해서 그룹으로 나눌 때 사용

group by절 다음에 하나 이상의 열을 나열하여 그룹을 나누면 그룹 및 하위 그룹으로 결과 반환
select dno, job, count(*), sum(salary) from employee group by dno, job order by dno, job;

* having : 그룹 결과 제한
------------------------------------------------------------------
Q. 부서별 급여 총액이 3000 이상인 부서 번호와 부서별 금액 총액은??
A. select dno, max(salary) from employee group by dno having max(salary)>=3000;
------------------------------------------------------------------
Q. 매니저 제외하고 급여 총액 5000 이상인 직급별 급여 총액 구하기
A. select job, count(*), sum(salary) from employee where job not like '%MANAGER%' group by job having sum(salary)>=5000;
------------------------------------------------------------------
Q. 각 업무별로 급여 최고액, 최저액, 총액, 평균을 출력하시오.
컬럼의 별칭은 직업, 최댓값, 최솟값, 합계, 평균 이며, 평균은 정수로 반올림하시오.
A.
select job as "직업", max(salary) as "최댓값", min(salary) as "최솟값", sum(salary) as "합계", round(avg(salary)) as "평균" from employee group by job;
------------------------------------------------------------------
Q. 각 부서에 대해 부서번호, 사원수, 부서 내의 모든 사원의 평균 급여를 출력하시오.
평균 급여는 소수점 셋째 자리에서 반올림하시요.
A.
select dno as "부서번호", count(*) as "사원수", round(avg(salary), 2) as "평균 급여" from employee group by dno order by dno;


==================================================================

<< 명령어 >> 
exit : sql문 종료
\host : 잠시 빠져나오기(exit 입력하면 다시 돌아옴)


